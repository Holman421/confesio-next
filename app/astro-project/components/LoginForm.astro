---
export interface Props {
  loginDisabled?: boolean;
}

const { loginDisabled = true } = Astro.props;

const VALID_USERNAME = 'holman';
const VALID_PASSWORD = '12345';
---

{!loginDisabled && (
  <div id="loginContainer" class="min-h-screen flex items-center justify-center bg-gray-100">
    <div class="bg-white p-8 rounded-xl shadow-xl w-full max-w-md">
      <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Sign In</h2>
      <form id="loginForm" class="space-y-4">
        <div>
          <label for="username" class="block text-sm font-medium text-gray-700 mb-2">Username</label>
          <input 
            type="text" 
            id="username" 
            name="username"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            required
          />
        </div>
        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
          <input 
            type="password" 
            id="password" 
            name="password"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            required
          />
        </div>
        <div id="errorMessage" class="text-red-500 text-sm hidden">
          Invalid username or password. Please try again.
        </div>
        <button 
          type="submit"
          class="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors duration-200 font-medium"
        >
          Sign In
        </button>
      </form>
    </div>
  </div>
)}

<script define:vars={{ loginDisabled, VALID_USERNAME, VALID_PASSWORD }}>
  function showMainApp() {
    const loginContainer = document.getElementById('loginContainer');
    const mainApp = document.getElementById('mainApp');
    if (loginContainer && mainApp) {
      loginContainer.style.display = 'none';
      mainApp.style.display = 'flex';
      document.dispatchEvent(new CustomEvent('app:start'));
    }
  }

  function setupAuth() {
    if (loginDisabled) {
      showMainApp();
      return;
    }

    const isAuthenticated = sessionStorage.getItem('authenticated') === 'true';
    if (isAuthenticated) {
      showMainApp();
    }

    const loginForm = document.getElementById('loginForm');
    loginForm?.addEventListener('submit', (e) => {
      e.preventDefault();
      const usernameInput = document.getElementById('username');
      const passwordInput = document.getElementById('password');
      const errorMessage = document.getElementById('errorMessage');
      
      if (!usernameInput || !passwordInput) return;
      
      const username = usernameInput.value;
      const password = passwordInput.value;
      
      if (username === VALID_USERNAME && password === VALID_PASSWORD) {
        sessionStorage.setItem('authenticated', 'true');
        showMainApp();
      } else {
        if(errorMessage) errorMessage.classList.remove('hidden');
        usernameInput.value = '';
        passwordInput.value = '';
      }
    });
  }

  // Initialize auth on component load
  setupAuth();
</script>
